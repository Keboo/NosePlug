name: .NET Core

on:
  push:
    branches: [ main ]
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    paths-ignore:
    - 'README.md'
    - 'Images/*'
    - 'docs/*'
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: pwsh

env:
  configuration: Release
  baseVersion: 0.0.1
  preRelease: true

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set Version
      run: |
        if ("${{ github.ref }}".startsWith("refs/tags/v")) {
          $tagVersion = "${{ github.ref }}".substring(11)
          echo "buildVersion=$tagVersion.${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "nugetVersion=$tagVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "preRelease=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        } else {
          echo "buildVersion=${{ env.baseVersion }}.${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "nugetVersion=${{ env.baseVersion }}-ci${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
    
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "3.1.x"
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "5.0.x"
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "6.x"
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    
    - name: Install dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build -p:Version=${{ env.buildVersion }} -p:ContinuousIntegrationBuild=True --configuration ${{ env.configuration }} --no-restore
    
    - name: Test
      timeout-minutes: 5
      run: dotnet test --no-build --configuration ${{ env.configuration }} --collect:"XPlat Code Coverage"

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
      with:
        reports: '**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v2.2.3
      with:
        name: CoverageReport
        path: coveragereport

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set Version
      run: |
        if ("${{ github.ref }}".startsWith("refs/tags/v")) {
          $tagVersion = "${{ github.ref }}".substring(11)
          echo "buildVersion=$tagVersion.${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "nugetVersion=$tagVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "preRelease=false" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        } else {
          echo "buildVersion=${{ env.baseVersion }}.${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "nugetVersion=${{ env.baseVersion }}-ci${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        }
    
    - name: Setup .NET Core 3.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "3.1.x"
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "5.0.x"
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "6.x"
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
    
    - name: Install dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build -p:Version=${{ env.buildVersion }} -p:ContinuousIntegrationBuild=True --configuration ${{ env.configuration }} --no-restore
    
    - name: Test
      timeout-minutes: 5
      run: dotnet test --no-build --configuration ${{ env.configuration }} --collect:"XPlat Code Coverage" --blame-hang --blame-hang-timeout 30s

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.12
      with:
        reports: '**/coverage.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline;Cobertura'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v2.2.3
      with:
        name: CoverageReport
        path: coveragereport

    - name: Pack
      if: ${{ github.event_name != 'pull_request' }}
      run: dotnet pack -p:PackageVersion=${{ env.nugetVersion }} --configuration ${{ env.configuration }} --no-build --output ${{ github.workspace }}

    - name: Upload Artifacts
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/upload-artifact@v2
      with:
        name: NuGet
        path: ${{ github.workspace }}\*.nupkg

    - name: Push NuGet
      if: ${{ github.event_name != 'pull_request' }}
      run: dotnet nuget push ${{ github.workspace }}\*.nupkg --source https://api.nuget.org/v3/index.json -k ${{ secrets.NUGET_API_KEY }} --skip-duplicate